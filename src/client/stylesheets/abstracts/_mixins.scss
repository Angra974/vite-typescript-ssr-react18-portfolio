// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/*
* https://hackingui.com/10-best-scss-utilities/
*/
%clearfix {
  *zoom: 1;
  &:after {
    content: "";
    display: table;
    line-height: 0;
    clear: both;
  }
}

/*
* creare a media query of with, with type
*
*/

$breakpoints: (
  "phone": 400px,
  "phone-wide": 480px,
  "phablet": 560px,
  "tablet-small": 640px,
  "tablet": 768px,
  "tablet-wide": 1024px,
  "desktop": 1248px,
  "desktop-wide": 1440px,
);

@mixin mq($type: min, $screenSizes...) {
  @each $width in $screenSizes {
    @if map_has_key($breakpoints, $width) {
      $width: map_get($breakpoints, $width);
      @if $type == max {
        $width: $width - 1px;
      }
      @media only screen and (#{$type}-width: $width) {
        @content;
      }
    }
  }
}

// container
@mixin make-container($padding-x: 0, $padding-y: 0) {
  width: 100%;
  padding-right: $padding-x;
  padding-left: $padding-x;
  padding-top: $padding-y;
  padding-bottom: $padding-y;
  margin-right: auto;
  margin-left: auto;
}

/* Opacity
-------------------------*/

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/* Font Size
-------------------------*/
@mixin font-size($size: 12, $base: 16) {
  font-size: $size + px;
  font-size: ($size / $base) * 1rem;
}

@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

/* center a block */
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/* Text overflow
-------------------------*/
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* quickly set flex property */
@mixin flex-it($justify: center, $align: center, $direction: false) {
  display: flex;
  justify-content: $justify;
  align-items: $align;
  @if $direction {
    flex-direction: $direction;
  }
}

/* add a gradient easily */
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == vertical {
    // vertical
    background: -moz-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(
      linear,
      left top,
      left bottom,
      color-stop(0%, $start-color),
      color-stop(100%, $end-color)
    );
    background: -webkit-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -o-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: -ms-linear-gradient(top, $start-color 0%, $end-color 100%);
    background: linear-gradient(to bottom, $start-color 0%, $end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
  } @else if $orientation == horizontal {
    // horizontal
    background: -moz-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(
      linear,
      left top,
      right top,
      color-stop(0%, $start-color),
      color-stop(100%, $end-color)
    );
    background: -webkit-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -o-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: -ms-linear-gradient(left, $start-color 0%, $end-color 100%);
    background: linear-gradient(to right, $start-color 0%, $end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  } @else {
    // radial
    background: -moz-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -webkit-gradient(
      radial,
      center center,
      0px,
      center center,
      100%,
      color-stop(0%, $start-color),
      color-stop(100%, $end-color)
    );
    background: -webkit-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -o-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: -ms-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
    background: radial-gradient(ellipse at center, F $start-color 0%, $end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }
}

//  position with pseudo classes
@mixin pseudo($loc: before, $content: "", $pos: absolute, $top: 0, $bottom: 0, $left: 0, $right: 0) {
  position: relative;

  &::#{$loc} {
    content: $content;
    position: $pos;
    top: $top;
    bottom: $bottom;
    left: $left;
    right: $right;
    @content;
  }
}

/* Border radius - https://codepen.io/Simek/pen/DwJGMy */
$prefixes: -webkit-, -moz-, -o-, "";

@mixin borderRadius($size...) {
  @if length($size) == 1 {
    @each $prefix in $prefixes {
      #{$prefix}border-radius: $size;
    }
  } @else {
    @include customBorderRadius($size...);
  }
}

@mixin customBorderRadius($topLeft: 0, $topRight: 0, $bottomRight: 0, $bottomLeft: 0) {
  @each $prefix in $prefixes {
    @if $prefix == "-moz-" {
      @if $topLeft != 0 {
        -moz-border-radius-topleft: $topLeft;
      }
      @if $topRight != 0 {
        -moz-border-radius-topright: $topRight;
      }
      @if $bottomRight != 0 {
        -moz-border-radius-bottomright: $bottomRight;
      }
      @if $bottomLeft != 0 {
        -moz-border-radius-bottomleft: $bottomLeft;
      }
    } @else {
      @if $topLeft != 0 {
        #{$prefix}border-top-left-radius: $topLeft;
      }
      @if $topRight != 0 {
        #{$prefix}border-top-right-radius: $topRight;
      }
      @if $bottomRight != 0 {
        #{$prefix}border-bottom-right-radius: $bottomRight;
      }
      @if $bottomLeft != 0 {
        #{$prefix}border-bottom-left-radius: $bottomLeft;
      }
    }
  }
}

@mixin size($size) {
  width: $size;
  height: $size;
}

@mixin button($padding: 10px 20px, $font-size: 16px, $border-radius: 3px, $bg-color: #ccc, $font-color: #333) {
  padding: $padding;
  display: inline-block;
  border-radius: $border-radius;
  background: $bg-color;
  font-size: $font-size;
  color: $font-color;
}
